// Code generated by sqlc. DO NOT EDIT.
// source: todos.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    task,
    is_done
) VALUES (
    $1,
    $2
)
RETURNING id, task, is_done, created_at, updated_at
`

type CreateTodoParams struct {
	Task   string
	IsDone bool
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, arg.Task, arg.IsDone)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.IsDone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todos
WHERE id = $1
RETURNING id AS deleted_id
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, deleteTodo, id)
	var deleted_id int64
	err := row.Scan(&deleted_id)
	return deleted_id, err
}

const findTodo = `-- name: FindTodo :one
SELECT id, task, is_done, created_at, updated_at FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRow(ctx, findTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Task,
		&i.IsDone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos SET 
    task = $2,
    is_done = $3
WHERE id = $1
RETURNING id AS updated_id
`

type UpdateTodoParams struct {
	ID     int64
	Task   string
	IsDone bool
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateTodo, arg.ID, arg.Task, arg.IsDone)
	var updated_id int64
	err := row.Scan(&updated_id)
	return updated_id, err
}
